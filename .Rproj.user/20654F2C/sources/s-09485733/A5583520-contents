---
title: "Desestacionalización Series Económicas"
author: "Luis Alfonso Luna"
date: "2021 - 2"
output: pdf_document
---

```{r message=FALSE, warning=FALSE}
library(forecast) #paquete más reciente disponible (fable)
library(seasonal) #paquete más reciente disponible (fabletools)
library(quantmod) 
library(tidyverse)
```

# Cargar Series de Tiempo Macro y financieras directamente en R

Usando el paquete QuantMod (Ryan & Ulrich, 2020), podemos cargar directamente series de tiempo cuya fuente sea Yahoo Finance, FRED, MySQL, Csv, RData, Oanda, o Av.

```{r warning=FALSE}
getSymbols("UNRATE",src = "FRED")
plot(UNRATE)
```

```{r}
plot(UNRATE, subset = "2010-01/2021-03")
```

```{r}
getSymbols("AAPL", src = "yahoo")
plot(AAPL)
```

```{r}
chartSeries(AAPL)
```

# Descomposición series de tiempo

Toda serie de tiempo puede dividirse en al menos tres componentes: tendencia, estacionalidad (**no confundir con estacionareidad**) y ciclos. Usualmente se mezcla tendencia y ciclos, por lo que podemos descompner nuestras series de tiempo en:

-   Tendencia-ciclo (a veces llamado solamente tendencia).
-   Estacional.
-   Todo lo demás (a veces llamado término error, **ojo**: no es el mismo error de la regresión, no confundir; evitaremos ese nombre).

Si asumimos una composición aditiva, podemos representar cualquier serie de tiempo como:

$$y_{t} = S_{t} + T_{t} + R_t,$$

Donde $y_t$ es la serie, $S_t$ es la estacionalidad, $T_t$ es la tendencia-ciclo y $R_t$ es todo lo demás (remainder). Podemos asumir también una composición multiplicativa.

$$y_{t} = S_{t} \times T_{t} \times R_t,$$

Es correcto asumir una composición aditiva cuando la magnitud de las fluctuaciones estacionales no varía con el nivel de la serie de tiempo. Cuando la variación en $S_{t}$ y/o $T_{t}$ parece ser proporcional al nivel de la serie de tiempo, usamos multiplicativa. Usualmente se asume composición multiplicativa en series de tiempo económicas.

Una alternativa a hacer descomposición multiplicativa es estabilizar los datos y luego asumir composición aditiva. Cuando la transformación es un logaritmo asumimos que es equivalente a hacer descomposición multiplicativa:

$$y_{t} = S_{t} \times T_{t} \times R_t \quad\text{es equivalente a}\quad
  \log y_{t} = \log S_{t} + \log T_{t} + \log R_t.$$

Existen múltiples métodos para descomponer una serie, entre estos:

-   Clásico.
-   X11.
-   Seats.
-   STL.

La descomposición es útil porque nos permite hacer mejores pronósticos, entender que hay debajo de la serie y encontrar algunas variables económicas (ej. PIB potencial).

### Método clásico (multiplicativo)

1.  Si $m$ es un número par, encuentre la tendencia ciclo $\hat{T}_{t}$ usando $2 \times m$ -MA. Si $m$ es impar, encuentre la tendencia ciclo $\hat{T}_{t}$ usando $m-\mathrm{MA}$.

2.  Calcule la serie sin tendencia: $y_t - \hat{T}_t$.

3.  Para estimar el componente estacional de cada temporada, encuentre el promedio para esa temporada. Por ejemplo, si tiene valores mensuales, el componente estacional de marzo es el promedio de todos los valores de marzo en los datos. Esto da $\hat{S}_t$.

4.  El resto lo obtiene substrayendo: $\hat{R}_t = y_t - \hat{T}_t - \hat{S}_t$.

```{r}
getSymbols("COLLRUNTTTTSTM",src="FRED")
td <- COLLRUNTTTTSTM
td <- td["/2020-05"]
td <- ts(td,start = c(2007,01),frequency = 12)
autoplot(td)
```

```{r}
td %>% decompose(type="multiplicative") %>%
  autoplot() + xlab("Año") +
  ggtitle("Descomposión multiplicativa clásica de la Tasa de Desempleo")
```

Tener en cuenta que:

-   El cálculo de la tendencia no está disponible para los últimos y los primeros periodos.
-   La tendencia suele suavizar mucho las caídas y subidas rápidas en los datos.
-   Se asume que el componente cíclico se repite de año a año.
-   Mal método para recoger cambios en periodos cortos de tiempo.

## Método X11

Es el método más usado, desarrollado en US Census Bureau. Está basado en el método clásico, pero corrige los inconvenientes expuestos anteriormente. Para más información mirar Dagum & Bianconcini (2016).

```{r}
td %>% seas(x11 = "") -> fit
autoplot(fit) +
  ggtitle("Descomposión X11 de la Tasa de Desempleo")
```

Se puede ver en el reminder, que el método X11 captura mejor los datos atípicos. Note también que el componente cíclico del ajuste estacional no es igual año a año.

```{r}
autoplot(td, series="Tasa de desempleo") +
  autolayer(trendcycle(fit), series="Tendencia") +
  autolayer(seasadj(fit), series="Ajuste Estacional") +
  xlab("Año") + ylab("") +
  ggtitle("Tasa Desempleo Colombia") +
  scale_colour_manual(values=c("gray","blue","red"),
             breaks=c("Tasa de desempleo","Ajuste Estacional","Tendencia"))
```

Puede ser hacer subgráficos mensuales del componente estacional. Así puede observarse los cambios en el componente estacional a través del tiempo.

```{r}
fit %>% seasonal() %>% ggsubseriesplot() + ylab("Componente Estacional")
```

## Descomposición SEATS

SEATS significa "Seasonal Extraction in ARIMA Time Series". Desarrollado por el Banco de España, hoy es uno de los métodos más usados. Desgraciadamente solamente funciona con datos trimestrales y mensuales. En la práctica da resultados muy similares a X11.

```{r}
td %>% seas() %>%
autoplot() +
  ggtitle("Descomposión SEATS de la Tasa de Desempleo")
```

## Descomposición STL

Acrónimo de "Seasonal and Trend decomposition using Loess", desarrollado por Cleveland, Cleveland, McRae, & Terpenning (1990). Tiene varias ventajas respecto a X11 y SEATS.

-   Puede trabajar con cualquier tipo de estacionalidad.
-   El investigador puede controlar manualmente el componente de cambio estacional.
-   El suavizado de la tendencia también puede ser controlado manualmente.
-   Robusto a datos atípicos.

Sin embargo hay que tener cuidado, ya que la utilidad del método reside completamente en los parámetros manuales.

Los dos parámetros a elegir son la "ventana" tendencia-ciclo y la "ventana" estacional. Valores más pequeños permiten cambios más rápidos. Ambos parámetros deben ser números impares, donde t.window es el número de observaciones consecutivas que se usan al estimar la tendencia-ciclo; s.window es el número de años consecutivos del componente estacional.

```{r}
td[,1] %>%
  stl(t.window=13, s.window="periodic", robust=TRUE) %>%
  autoplot()
```

Puedo usar mstl() para que haga la composición de manera automática. En este caso no hay mucha diferencia con X11.

```{r}
td %>%
  mstl() %>%
  autoplot()
```

Para obtener la serie desetacionalizada basta con usar la función *final()*.

```{r}
td_desest <- td %>% seas(x11="") %>% final()
plot(td_desest)
```

```{r}
autoplot(td_desest) + autolayer(td)
```

```{r}
pronost <- stlf(td, method = "naive")
autoplot(pronost)
```
